//Tämä muuttuja sisältää pelien yhteismäärän (täytyy määritellä ennen pelien lataamista)
Global MAIN_GameCount

//Tämä muuttuja pitää sisällään käynnissä olevan pelin ID:n
Global MAIN_RunningGameID As String 

//Tämä tyyppikokoelma pitää listaa kaikista peleistä ja niiden tiedoista
Type MAIN_Game
	Field ID$                //Pelin ID (sama kuin prefiksi ja kansio)
	Field Name$              //Pelin nimi
	Field Desc$              //Pelin seloste (tavoite)
	Field Controls$          //Pelin kontrolliohjeet
	
	Field PlayerSetup$       //ALLvsALL, 1vsALL tai TEAMvs, useat arvot erotetaan pilkulla
	Field MinPlayers         //Pelin tukema minimipelaajamäärä
	Field MaxPlayers         //Pelin tukema maksimipelaajamäärä
	
	Field SupportAI          //Voiko peli pelata tietokonevastustajilla? (YES/NO, oletus NO)
	Field SupportHandicap    //Tukeeko peli helpotuksia? (YES/NO, oletus NO)
	Field Difficulty         //Pelin vaikeustaso (1, 2 tai 3), 0 jos tukee useita
	
	Field Logo
EndType


//Lisää pelin pelikokoelmaan. Lisätiedot luetaan gamedata.ini tiedostosta
//Koska pelien lisäys on automatisoitu, voidaan muuttaa API -> MAIN
Function MAIN_AddGame(ID$)
	If ID = "" Then MakeError "Pelillä ei ole tunnistetta!"
	
	//Tarkistetaan, ettei peliä ole vielä lisätty
	For iG.MAIN_Game = Each MAIN_Game
		If iG\ID = ID Then MakeError "Pelikokoelmassa on samalla tunnisteella pelejä: " + ID + "!"
	Next iG
	
	//Ladataan tiedot
	If Not FileExists("Games/" + ID + "/gameinfo.ini") Then MakeError "Peliltä " + ID + " puuttuu asetustiedosto!"		
	MAIN_ParseSettings("Games/" + ID + "/gameinfo.ini")
	
	//Lisätään tiedot pelikokoelmaan
	nG.MAIN_Game = New(MAIN_Game)
	nG\ID = ID
	
	nG\Name = MAIN_GetSetting("Name")
	nG\Desc = MAIN_GetSetting("Desc")
	nG\Controls = MAIN_GetSetting("Controls")
	
	nG\PlayerSetup = Upper(Str(MAIN_GetSetting("PlayerSetup")))
	nG\MinPlayers = Int(MAIN_GetSetting("MinPlayers"))
	nG\MaxPlayers = Int(MAIN_GetSetting("MaxPlayers"))
	
	nG\SupportAI = (Upper(Str(MAIN_GetSetting("SupportAI"))) = "YES")
	nG\SupportHandicap = (Upper(Str(MAIN_GetSetting("SupportHandicap"))) = "YES")
	If MAIN_HasSetting("Difficulty") Then
		nG\Difficulty = Int(MAIN_GetSetting("Difficulty"))
	Else
		nG\Difficulty = -1
	EndIf
	
	//Tarkistetaan, ettei samannimistä peliä ole vielä lisätty
	For iG.MAIN_Game = Each MAIN_Game
		If iG <> nG And iG\Name = nG\Name Then MakeError "Pelikokoelmassa on samannimisiä pelejä: " + Name + "! (" + nG\ID + " ja " + iG\ID + ")"
	Next iG
	
	//Tutkitaan puuttuvat tiedot ja aiheutetaan virheilmoitus, jos puuttuu pakollisia tietoja/epäkelpoja arvoja
	err$ = "Minipelin " + ID + " tietoja puuttuu: "
	If Len(nG\Name) <= 1 Then err = err + "nimi, "
	If nG\Desc = "" Then err = err + "selite, "
	If nG\Controls = "" Then err = err + "näppäinselite, "
	If Not(InStr(nG\PlayerSetup, "ALLVSALL") Or InStr(nG\PlayerSetup, "1VSALL") Or InStr(nG\PlayerSetup, "TEAMVS")) Then err = err + "pelaajien kokoonpano, "
	If Not FileExists("Games/" + ID + "/logo.png") Then err = err + "logo.png, "
	
	If err <> "Minipelin " + ID + " tietoja puuttuu: " Then MakeError Left(err, Len(err) - 2) + "!"
	
	//Lisätään oletustiedot, jos puuttuu vapaaehtoisia tietoja tai tiedot epäkelpoja
	If nG\MaxPlayers < 1 Or nG\MaxPlayers > MAIN_MAX_PLAYERS Then nG\MaxPlayers = MAIN_MAX_PLAYERS
	nG\MinPlayers = Min(nG\MaxPlayers, Max(1, nG\MinPlayers))
	
	If nG\SupportAI <> 1 Then nG\SupportAI = False
	If nG\SupportHandicap <> 1 Then nG\SupportHandicap = False
	If nG\Difficulty < 0 Then nG\Difficulty = 2
	
	nG\Logo = LoadImage("Games/" + ID + "/logo.png")
	
	MAIN_GameCount = MAIN_GameCount + 1
EndFunction


//Hakee kokoelmasta pelin ja palauttaa sen osoitteen
Function MAIN_GetGame(ID$)
	For iG.MAIN_Game = Each MAIN_Game
		If iG\ID = ID Then Return ConvertToInteger(iG)
	Next iG
EndFunction


//Pelivalitsin / päävalikko
//näyttää kokoelman pelit ja käynnistää ne niiden logoa klikkaamalla
Function MAIN_SelectGame()
	GameData = API_MakeGameData()
	API_PlayerCount(GameData, MAIN_PlayerAmount)
	API_PlayerSetup(GameData, "ALLvsALL")
	API_Difficulty(GameData, 2)
	
	marginBig = 20
	marginSmall = 2
	logoSize = 100
	rowHeight = 20 

	Repeat

		Text marginBig,marginBig,"Pelikokoelmassa on seuraavat pelit: "
	
		gameCount = 0
		
		mx = API_MouseX()
		my = API_MouseY()
		
		DrawGame
		
		Color 255, 255, 255
		
		For iG.MAIN_Game = Each MAIN_Game

			If (MAIN_GameCompatible(ConvertToInteger(iG), GameData)) Then 
			
				y = marginBig + rowHeight + gameCount * (100 + marginBig/2)
	
				//onko hiiri pelin päällä
				If( API_MouseInBox(marginBig-marginSmall,y-marginSmall,API_RenderW-marginBig*2,logoSize+marginSmall*2)) Then
					If( MouseHit(1)) Then MAIN_Start(iG\ID, GameData)
					Box marginBig-marginSmall,y-marginSmall,API_RenderW-marginBig*2,logoSize+marginSmall*2,0
					
					info$ = "Lisätiedot: "
					If iG\SupportAI Then info = info + "tietokonevastustajat, "
					If iG\SupportHandicap Then info = info + "tasoitus, "
					If iG\Difficulty = 0 Then info = info + "vaikeustason valinta."
					If iG\Difficulty = 1 Then info = info + "vaikeustaso helppo."
					If iG\Difficulty = 2 Then info = info + "vaikeustaso normaali."
					If iG\Difficulty = 3 Then info = info + "vaikeustaso vaikea."
					Text marginSmall, API_RenderH - marginSmall - 12, info$
				EndIf 
	
				DrawImage iG\Logo ,marginBig, y
			
				Text marginBig*3/2+logoSize,y+rowHeight,iG\ID + " " + iG\Name
				Text marginBig*3/2+logoSize,y+rowHeight*2,iG\Desc
				Text marginBig*3/2+logoSize,y+rowHeight*3,iG\Controls
				Text marginBig*3/2+logoSize,y+rowHeight*4,iG\PlayerSetup + " " + iG\MaxPlayers
				
				gameCount = gameCount + 1
			
			EndIf 
		Next iG
		
		mediaCount = 0
		For iM.MAIN_Media = Each MAIN_Media
			mediaCount = mediaCount + 1
			Text 10, 260 + mediaCount * 15, iM\FileName
		Next iM
		Text 0, 260, "Ladattua mediaa: " + mediaCount

		
		API_DrawScreen()
	Forever
EndFunction 


//Tarkastaa, voidaanko peliä pelata annetuilla asetuksilla
Function MAIN_GameCompatible(Game, GameData)
	iG.MAIN_Game = ConvertToType(Game)
	
	If iG\MinPlayers > API_PlayerCount(GameData) Then Return False
	If iG\MaxPlayers < API_PlayerCount(GameData) Then Return False
	
	If Not InStr(Upper(Str(API_PlayerSetup(GameData))), Upper(iG\PlayerSetup)) Then Return False
	If iG\Difficulty <> 0 And iG\Difficulty <> API_Difficulty(GameData) Then Return False
	
	If Not iG\SupportAI Then
		For i = 0 To API_PlayerCount(GameData) - 1
			If API_PlayerNPC(i) > 0 Then Return False
		Next i
	EndIf
	
	Return True
EndFunction


//GameData-palikkaan offsettejä
Const MAIN_GD_PLAYERCOUNT = 0
Const MAIN_GD_PLAYERSETUP = 4
Const MAIN_GD_DIFFICULTY = 8
//Sisältää GameData-palikan koon
Const MAIN_GD_BLOCKSIZE = 12

Global MAIN_GameData

//Luo GameData-muistipalan
Function API_MakeGameData()
	Return MakeMEMBlock(MAIN_GD_BLOCKSIZE)
EndFunction


//Asettaa tai palauttaa pelaajien määrän
Function API_PlayerCount(GameData = 0, playerCount = -1)
	If GameData = 0 Then GameData = MAIN_GameData
	
	If playerCount = -1 Then
		Return PeekInt(GameData, MAIN_GD_PLAYERCOUNT)
	Else
		PokeInt GameData, MAIN_GD_PLAYERCOUNT, playerCount
	EndIf
EndFunction


//Asettaa tai palauttaa pelaajakokoonpanon
Function API_PlayerSetup(GameData = 0, playerSetup$ = "TOIVOTAANettäEItuleTÖRMÄYKSIÄtämänMERKKIJONONkanssa!!")
	If GameData = 0 Then GameData = MAIN_GameData
	
	//Tehdään uusi merkkijono, jos ei ole olemassa
	address = PeekInt(GameData, MAIN_GD_PLAYERSETUP)
	If address = 0 Then
		iS.MAIN_CommonString = New(MAIN_CommonString)
		id = ConvertToInteger(iS)
		
		PokeInt GameData, MAIN_GD_PLAYERSETUP, id
	Else
		iS = ConvertToType(address)
	EndIf
	
	If playerSetup = "TOIVOTAANettäEItuleTÖRMÄYKSIÄtämänMERKKIJONONkanssa!!" Then
		Return iS\txt
	Else
		iS\txt = playerSetup
	EndIf
EndFunction


//Asettaa tai palauttaa vaikeustason
Function API_Difficulty(GameData = 0, difficulty = -1)
	If GameData = 0 Then GameData = MAIN_GameData
	
	If difficulty = -1 Then
		Return PeekInt(GameData, MAIN_GD_DIFFICULTY)
	Else
		PokeInt GameData, MAIN_GD_DIFFICULTY, difficulty
	EndIf
EndFunction


//Aloittaa pelin
Function MAIN_Start(ID$, GameData)
	MAIN_GameData = GameData
	API_ResetToDefaults()
	MAIN_RunningGameID = ID$
	MAIN_GameStartTimer = Timer()
	API_Timer = 0
	Include "Games\Start.cb"
	MAIN_Stop()
EndFunction


//Lopettaa pelin
Function MAIN_Stop()
	Include "Games\Stop.cb"
	MAIN_DeleteWidgets()
	MAIN_ResetPlayersDataBlocks()
	MAIN_ClearMedia("*CLONE")
	MAIN_RunningGameID = ""
	API_ResetToDefaults()
EndFunction

//Tässä kohtaa ladataan KAIKKI minipelit
Include "Games\Include.cb"