//Pelaajien hallinta

//Pelaajan muistipalan offsettej‰
Const MAIN_PLAYER_NAME = 0      //Viittaa merkkijonoon, joka sis‰lt‰‰ pelaajan nimen
Const MAIN_PLAYER_COLOR = 4     //Viittaa muistipalaan, joka sis‰lt‰‰ pelaajan v‰rin
Const MAIN_PLAYER_CONTROLS = 8  //Viittaa muistipalaan, joka sis‰lt‰‰ pelaajan n‰pp‰imet
Const MAIN_PLAYER_POINTS = 12   //Sis‰lt‰‰ pelaajan pisteet (Int)
Const MAIN_PLAYER_DYNAMIC = 16  //Viittaa muistipalaan, joka on tarkoitettu minipelikohtaista tiedontallennusta varten

//Pelaajan muistipalan koko
Const MAIN_PLAYER_STATIC_SIZE = 20

//Pelaajien maksimim‰‰r‰ 8, tietokoneelle harvoin pystyy sen enemp‰‰ pelaamaan (loppuu n‰pp‰imet ja kapulat :D )
Const MAIN_MAX_PLAYERS = 8

//Sis‰lt‰‰ viittaukset pelaajien muistipaloihin
Dim MAIN_PlayerData(MAIN_MAX_PLAYERS) As integer 

//Sis‰lt‰‰ todellisen tiedon pelaajien m‰‰r‰st‰ (minipelille saatetaan ilmoittaa eri m‰‰r‰)
Global MAIN_PlayerAmount
MAIN_PlayerAmount = 0


Type MAIN_CommonString
	Field txt$
EndType


//Lis‰‰ pelaajan ja v‰rin, palauttaa pelaajan numeron
Function MAIN_AddPlayer(name$, r = -1, g = -1, b = -1)
	number = -1
	
	//Luodaan pelaaja seuraavalle vapaalle indeksille jos on olemassa (muutoin palautetaan -1)
	For i = 0 To MAIN_MAX_PLAYERS - 1
		If (MAIN_PlayerData(i) = 0) Then number = i : Exit
	Next i
	
	If (number <> -1) Then 
		MAIN_PlayerAmount = MAIN_PlayerAmount + 1
		
		player = MakeMEMBlock(MAIN_PLAYER_STATIC_SIZE)
		
		iS. MAIN_CommonString = New(MAIN_CommonString)
		iS\txt$ = name$
		id = ConvertToInteger(iS)  

		col = MakeMEMBlock(4)
		ctrl = MakeMEMBlock(API_ACTIONS + 1)
		
		PokeInt player, MAIN_PLAYER_NAME, id
		PokeInt player, MAIN_PLAYER_COLOR, col
		PokeInt player, MAIN_PLAYER_CONTROLS, ctrl
		PokeInt player, MAIN_PLAYER_POINTS, 0
		PokeInt player, MAIN_PLAYER_DYNAMIC, MakeMEMBlock(4)
		
		MAIN_PlayerData(number) = player

		API_PlayerColor(number,r,g,b)
	EndIf 
	
	Return number
EndFunction 


// Asettaa ja palauttaa pelaajan pisteet
Function API_PlayerPoints(number, points = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		If (points >= 0) Then 
			PokeInt player, MAIN_PLAYER_POINTS, points
			Return points
		Else 
			Return PeekInt(player, MAIN_PLAYER_POINTS)
		EndIf 
	EndIf 
	
	Return 0
EndFunction


//Asettaa tai palauttaa pelaajan v‰rikomponentit tai pikselin
Function API_PlayerColor(number, r = -1, g = -1, b = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		col = PeekInt(player, MAIN_PLAYER_COLOR)
		
		If r = -1 Then
			c = Rand(1, 6)
			c = c Shl 29
			PokeByte col, RED, 127 + 127 * (c Shr 31) 
			
			c = c Shl 1
			PokeByte col, GREEN, 127 + 127 * (c Shr 31) 
			
			c = c Shl 1
			PokeByte col, BLUE, 127 + 127 * (c Shr 31) 
		Else 
			If g = -1 Or b = -1 And (r => 0 And r < 4)
				If r = 0 Then
					Return PeekByte(col, BLUE) + (PeekByte(col, GREEN) * 256) + (PeekByte(col, RED) * 65536) + (255 Shl 24)
				Else
					Return PeekByte(col, r)
				EndIf
			Else
				PokeByte col, RED, r Mod 256
				PokeByte col, GREEN, g Mod 256
				PokeByte col, BLUE, b Mod 256
			EndIf
		EndIf   
	EndIf 
EndFunction 


//Palauttaa minipelin k‰ytt‰m‰n muistipalan
Function API_PlayerDataBlock(number)
	Return PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
EndFunction


//Asettaa tai palauttaa kokonaisluvun
Function API_PlayerInt(number, dataField, value$ = "NAN")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4
	
	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	If value = "NAN" Then
		Return PeekInt(dynamic, dataField)
	Else
		PokeInt dynamic, dataField, Int(value)
		Return value
	EndIf
EndFunction

//Asettaa tai palauttaa liukuluvun
Function API_PlayerFloat(number, dataField, value$ = "NAN")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4
	
	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	If value = "NAN" Then
		Return PeekFloat(dynamic, dataField)
	Else
		PokeFloat dynamic, dataField, Float(value)
		Return value
	EndIf
EndFunction

//Asettaa tai palauttaa merkkijonon
Function API_PlayerString(number, dataField, value$ = "TOIVOTAANett‰EItuleT÷RMƒYKSIƒt‰m‰nMERKKIJONONkanssa!!")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4
	
	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	//Tehd‰‰n uusi merkkijono, jos ei ole olemassa
	address = PeekInt(dynamic, dataField)
	If address = 0 Then
		iS.MAIN_CommonString = New(MAIN_CommonString)
		id = ConvertToInteger(iS)
		
		PokeInt dynamic, dataField, id
	Else
		iS = ConvertToType(address)
	EndIf
	
	If value = "TOIVOTAANett‰EItuleT÷RMƒYKSIƒt‰m‰nMERKKIJONONkanssa!!" Then
		Return iS\txt
	Else
		iS\txt = value
	EndIf
EndFunction


//Kopioi staatisen ja/tai dynaamisen muistipalan
//pelaajalle jos annettu pala on erisuuri kuin nolla
Function MAIN_CopyPlayerData(number, static = 0, dynamic = 0)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number) 
		
		If (static <> 0 And MEMBlockSize(static) = MAIN_PLAYER_STATIC_SIZE) Then 
			MemCopy static, 0, player, 0, MAIN_PLAYER_STATIC_SIZE
		EndIf 
		
		p_dynamic = PeekInt(player, MAIN_PLAYER_DYNAMIC)
		
		If (dynamic <> 0) Then
			size = MEMBlockSize(dynamic)
			ResizeMEMBlock p_dynamic, size
			MemCopy dynamic, 0, p_dynamic, 0, size
			PokeInt player, MAIN_PLAYER_DYNAMIC, p_dynamic
		EndIf 
	EndIf 
EndFunction 

//Lataa defaulttiasetukset 
//TODO: mahdollista n‰pp‰inten lataus tiedostosta, 
//mieluiten Gamesettinginsin kautta
Function MAIN_LoadKeys()
	If (MAIN_PlayerData(0) <> 0) Then
		player = MAIN_PlayerData(0)
		
		ctrl = PeekInt(player, MAIN_PLAYER_CONTROLS)
		
		PokeByte ctrl, API_UP, 		200 //Ylˆs nuoli
		PokeByte ctrl, API_DOWN, 	208 //Alas nuoli
		PokeByte ctrl, API_LEFT, 	203 //Vasen nuoli
		PokeByte ctrl, API_RIGHT, 	205 //Oikea nuoli
		PokeByte ctrl, API_ACTION1, 54  //Oikea shift
		PokeByte ctrl, API_ACTION2, 221 //Oikea ctrl
		PokeByte ctrl, API_CONTROL_SOURCE, API_KEYBOARD
	EndIf 
		
	If (MAIN_PlayerData(1) <> 0) Then
		player = MAIN_PlayerData(1)
		
		ctrl = PeekInt(player, MAIN_PLAYER_CONTROLS)
		
		PokeByte ctrl, API_UP, 		17 //W
		PokeByte ctrl, API_DOWN,	31 //S
		PokeByte ctrl, API_LEFT, 	30 //A
		PokeByte ctrl, API_RIGHT, 	32 //D
		PokeByte ctrl, API_ACTION1, 42 //Vasen shift
		PokeByte ctrl, API_ACTION2, 86 //<>
		PokeByte ctrl, API_CONTROL_SOURCE, API_KEYBOARD
	EndIf 
End Function
