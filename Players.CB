//Pelaajien hallinta

//Pelaajan muistipalan offsettej‰
Const MAIN_PLAYER_NAME        = 0     //Viittaa merkkijonoon, joka sis‰lt‰‰ pelaajan nimen
Const MAIN_PLAYER_CONTROLS    = 4     //Viittaa muistipalaan, joka sis‰lt‰‰ pelaajan n‰pp‰imet

Const MAIN_PLAYER_COLOR       = 8     //Sis‰lt‰‰ pelaajan tunnusv‰rin
Const MAIN_PLAYER_SKIN        = 12    //Sis‰lt‰‰ pelaajan ihonv‰rin
Const MAIN_PLAYER_HEADGEAR    = 16    //Sis‰lt‰‰ tiedot pelaajan osista
Const MAIN_PLAYER_HEAD        = 17    //Sis‰lt‰‰ tiedot pelaajan osista
Const MAIN_PLAYER_BODY        = 18    //Sis‰lt‰‰ tiedot pelaajan osista

Const MAIN_PLAYER_TEAM        = 20    //Sis‰lt‰‰ pelaajan joukkueen numeron
Const MAIN_PLAYER_NPC         = 24    //Onko ihmispelaaja (0) vai teko‰ly (taitavuus 1, 2 tai 3)
Const MAIN_PLAYER_POINTS      = 28    //Sis‰lt‰‰ pelaajan pisteet (Int)

Const MAIN_PLAYER_DYNAMIC     = 32    //Viittaa muistipalaan, joka on tarkoitettu minipelikohtaista tiedontallennusta varten

//Pelaajan muistipalan koko
Const MAIN_PLAYER_STATIC_SIZE = 36

//Pelaajien maksimim‰‰r‰ 8, tietokoneelle harvoin pystyy sen enemp‰‰ pelaamaan (loppuu n‰pp‰imet ja kapulat :D )
Const MAIN_MAX_PLAYERS = 8

//Sis‰lt‰‰ viittaukset pelaajien muistipaloihin
Dim MAIN_PlayerData(MAIN_MAX_PLAYERS) As integer 

//Sis‰lt‰‰ todellisen tiedon pelaajien m‰‰r‰st‰ (minipelille saatetaan ilmoittaa eri m‰‰r‰)
Global MAIN_PlayerAmount
MAIN_PlayerAmount = 0


Type MAIN_CommonString
	Field txt$
EndType


//Lis‰‰ pelaajan ja v‰rin, palauttaa pelaajan numeron
Function MAIN_AddPlayer(name$, r = -1, g = -1, b = -1)
	number = -1
	
	//Luodaan pelaaja seuraavalle vapaalle indeksille jos on olemassa (muutoin palautetaan -1)
	For i = 0 To MAIN_MAX_PLAYERS - 1
		If (MAIN_PlayerData(i) = 0) Then number = i : Exit
	Next i
	
	If (number <> -1) Then 
		MAIN_PlayerAmount = MAIN_PlayerAmount + 1
		
		player = MakeMEMBlock(MAIN_PLAYER_STATIC_SIZE)
		
		iS. MAIN_CommonString = New(MAIN_CommonString)
		iS\txt$ = name$
		id = ConvertToInteger(iS)  

		PokeInt player, MAIN_PLAYER_NAME, id
		PokeInt player, MAIN_PLAYER_CONTROLS, MakeMEMBlock(API_ACTIONS + 1)
		PokeInt player, MAIN_PLAYER_POINTS, 0
		PokeInt player, MAIN_PLAYER_DYNAMIC, MakeMEMBlock(4)
		
		MAIN_PlayerData(number) = player

		API_PlayerColor(number,r,g,b)
	EndIf 
	
	Return number
EndFunction 


// Asettaa ja palauttaa pelaajan teko‰lyarvon
Function API_PlayerNPC(number, npc = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		If (npc >= 0) Then 
			PokeInt player, MAIN_PLAYER_NPC, npc
			Return npc
		Else 
			Return PeekInt(player, MAIN_PLAYER_NPC)
		EndIf 
	EndIf 
	
	Return 0
EndFunction


// Asettaa ja palauttaa pelaajan joukkuenumeron
Function API_PlayerTeam(number, team = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		If (team >= 0) Then 
			PokeInt player, MAIN_PLAYER_NPC, team
			Return team
		Else 
			Return PeekInt(player, MAIN_PLAYER_NPC)
		EndIf 
	EndIf 
	
	Return 0
EndFunction


// Asettaa ja palauttaa pelaajan pisteet
Function API_PlayerPoints(number, points = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		If (points >= 0) Then 
			PokeInt player, MAIN_PLAYER_POINTS, points
			Return points
		Else 
			Return PeekInt(player, MAIN_PLAYER_POINTS)
		EndIf 
	EndIf 
	
	Return 0
EndFunction


//Asettaa tai palauttaa pelaajan v‰rikomponentit tai pikselin
Function API_PlayerColor(number, r = -1, g = -1, b = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number)
		
		If r = -1 Then
			c = Rand(1, 6)
			c = c Shl 29
			PokeByte player, MAIN_PLAYER_COLOR + 3 - RED, 127 + 127 * (c Shr 31) 
			
			c = c Shl 1
			PokeByte player, MAIN_PLAYER_COLOR + 3 - GREEN, 127 + 127 * (c Shr 31) 
			
			c = c Shl 1
			PokeByte player, MAIN_PLAYER_COLOR + 3 - BLUE, 127 + 127 * (c Shr 31) 
		Else 
			If g = -1 Or b = -1 And (r => 0 And r < 4)
				If r = 0 Then
					Return PeekInt(player, MAIN_PLAYER_COLOR)
				Else
					Return PeekByte(player, MAIN_PLAYER_COLOR + 3 - r)
				EndIf
			Else
				PokeByte player, MAIN_PLAYER_COLOR + 3 - RED, r Mod 256
				PokeByte player, MAIN_PLAYER_COLOR + 3 - GREEN, g Mod 256
				PokeByte player, MAIN_PLAYER_COLOR + 3 - BLUE, b Mod 256
				PokeByte player, MAIN_PLAYER_COLOR + 4, 255
			EndIf
		EndIf   
	EndIf 
EndFunction 


//Palauttaa minipelin k‰ytt‰m‰n muistipalan
Function API_PlayerDataBlock(number)
	Return PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
EndFunction

//Tyhjent‰‰ pelaajien muistipalat
Function MAIN_ResetPlayersDataBlocks()

	For p = 0 To MAIN_PlayerAmount - 1
		player = MAIN_PlayerData(p)
		
		If player <> 0 Then 
			dynamic = PeekInt(player, MAIN_PLAYER_DYNAMIC)
		
			If dynamic <> 0 Then 
				For i = 0 To MEMBlockSize(dynamic) - 1 
					PokeByte dynamic, i, 0
				Next i
			EndIf 
			
		EndIf 
	Next p
	
EndFunction

//Asettaa tai palauttaa kokonaisluvun
Function API_PlayerInt(number, dataField, value$ = "NAN")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4
	
	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	If value = "NAN" Then
		Return PeekInt(dynamic, dataField)
	Else
		PokeInt dynamic, dataField, Int(value)
		Return value
	EndIf
EndFunction

//Asettaa tai palauttaa liukuluvun
Function API_PlayerFloat(number, dataField, value$ = "NAN")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4
	
	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	If value = "NAN" Then
		Return PeekFloat(dynamic, dataField)
	Else
		PokeFloat dynamic, dataField, Float(value)
		Return value
	EndIf
EndFunction

//Asettaa tai palauttaa merkkijonon
Function API_PlayerString(number, dataField, value$ = "TOIVOTAANett‰EItuleT÷RMƒYKSIƒt‰m‰nMERKKIJONONkanssa!!")
	dynamic = PeekInt(MAIN_PlayerData(number), MAIN_PLAYER_DYNAMIC)
	dataField = dataField * 4

	//Venytet‰‰n palikkaa jos tarpeen
	If dataField + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, dataField + 4
	
	//Tehd‰‰n uusi merkkijono, jos ei ole olemassa
	address = PeekInt(dynamic, dataField)
	If address = 0 Then
		iS.MAIN_CommonString = New(MAIN_CommonString)
		id = ConvertToInteger(iS)
		PokeInt dynamic, dataField, id
	Else
		iS = ConvertToType(address)
	EndIf
	
	If value = "TOIVOTAANett‰EItuleT÷RMƒYKSIƒt‰m‰nMERKKIJONONkanssa!!" Then
		Return iS\txt
	Else
		iS\txt = value
	EndIf
	
EndFunction


//Kopioi staatisen ja/tai dynaamisen muistipalan
//pelaajalle jos annettu pala on erisuuri kuin nolla
Function MAIN_CopyPlayerData(number, static = 0, dynamic = 0)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number) 
		
		If (static <> 0 And MEMBlockSize(static) = MAIN_PLAYER_STATIC_SIZE) Then 
			MemCopy static, 0, player, 0, MAIN_PLAYER_STATIC_SIZE
		EndIf 
		
		p_dynamic = PeekInt(player, MAIN_PLAYER_DYNAMIC)
		
		If (dynamic <> 0) Then
			size = MEMBlockSize(dynamic)
			ResizeMEMBlock p_dynamic, size
			MemCopy dynamic, 0, p_dynamic, 0, size
			PokeInt player, MAIN_PLAYER_DYNAMIC, p_dynamic
		EndIf 
	EndIf 
EndFunction 

//Lataa n‰pp‰inasetukset
Function MAIN_LoadKeys()
	MAIN_ParseSettings("Saved Data/keyconfig.ini")
	
	For i = 1 To MAIN_PlayerAmount
		If (MAIN_PlayerData(i-1) <> 0) Then
			player = MAIN_PlayerData(i-1)
			
			ctrl = PeekInt(player, MAIN_PLAYER_CONTROLS)
			
			PokeByte ctrl, API_UP, MAIN_GetSetting("PLAYER"+i+"_UP")
			PokeByte ctrl, API_DOWN, MAIN_GetSetting("PLAYER"+i+"_DOWN")
			PokeByte ctrl, API_LEFT, MAIN_GetSetting("PLAYER"+i+"_LEFT")
			PokeByte ctrl, API_RIGHT, MAIN_GetSetting("PLAYER"+i+"_RIGHT")
			PokeByte ctrl, API_ACTION1, MAIN_GetSetting("PLAYER"+i+"_ACTION1")
			PokeByte ctrl, API_ACTION2, MAIN_GetSetting("PLAYER"+i+"_ACTION2")
			PokeByte ctrl, API_CONTROL_SOURCE, API_KEYBOARD
		EndIf 
	Next i
End Function


//Asettaa tai palauttaa pelaajan hahmon p‰‰hineen
Function API_PlayerHeadgear(number, partNo = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number) 
		
		If partNo < 0 Then
			Return PeekByte(player, MAIN_PLAYER_HEADGEAR)
		Else
			PokeByte player, MAIN_PLAYER_HEADGEAR, partNo
		EndIf
	EndIf
EndFunction


//Asettaa tai palauttaa pelaajan hahmon p‰‰n
Function API_PlayerHead(number, partNo = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number) 
		
		If partNo < 0 Then
			Return PeekByte(player, MAIN_PLAYER_HEAD)
		Else
			PokeByte player, MAIN_PLAYER_HEAD, partNo
		EndIf
	EndIf
EndFunction


//Asettaa tai palauttaa pelaajan hahmon ruumiin
Function API_PlayerBody(number, partNo = -1)
	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
		player = MAIN_PlayerData(number) 
		
		If partNo < 0 Then
			Return PeekByte(player, MAIN_PLAYER_BODY)
		Else
			PokeByte player, MAIN_PLAYER_BODY, partNo
		EndIf
	EndIf
EndFunction


//Kokoaa hahmon osista
Function MAIN_CompileCharacter(number, style$ = "side")
	Headgear$ = Replace(RSet(Str(API_PlayerHeadgear(number)), 3), " ", "0")
	Head$ = Replace(RSet(Str(API_PlayerHead(number)), 3), " ", "0")
	Body$ = Replace(RSet(Str(API_PlayerBody(number)), 3), " ", "0")
	dir$ = "GlobalMedia/Character" + style + "Parts/"
	
	//Ladataan ensin ruumiin ihonv‰rill‰ v‰rj‰tt‰v‰ kuva
	If FileExists(dir + "Body_SC_" + Body + ".png") Then
		BodySC = LoadImage(dir + "Body_SC_" + Body + ".png")
		'API_Recolor(number, BodySC, 10)
	EndIf
	//Sitten tunnusv‰rill‰
	If FileExists(dir + "Body_PC_" + Body + ".png") Then
		Character = LoadImage(dir + "Body_PC_" + Body + ".png")
		
		//Etsit‰‰n p‰‰n sijainnin merkitsev‰‰ magentaa pistett‰
		Lock Image(Character)
			hx = -1 : hy = -1
			For y = 0 To ImageHeight(Character) - 1
				For x = 0 To ImageWidth(Character) - 1
					If GetPixel2(x, y, Image(Character)) = -65281 Then hx = x : hy = y : Exit //Magenta 255, 0, 255
				Next x
				If hx = x Then Exit
			Next y
		Unlock Image(Character)
		
		API_Recolor(number, Character, 10, BodySC)  //Jos BodySC ei ole ladattu, niin se on nolla => j‰tet‰‰n huomiotta
		
		If BodySC <> 0 Then DeleteImage BodySC
	Else
		API_MakeError("Hahmon ruumista ei ole olemassa")
	EndIf
	
	//P‰‰st‰ todenn‰kˆisesti lˆytyy aina ihonv‰rikuva, joten ladataan ensin tunnusv‰reill‰
	If FileExists(dir + "Head_PC_" + Head + ".png") Then
		HeadPC = LoadImage(dir + "Head_PC_" + Head + ".png")
		API_Recolor(number, HeadPC, 10)
	EndIf
	If FileExists(dir + "Head_SC_" + Head + ".png") Then
		HeadSC = LoadImage(dir + "Head_SC_" + Head + ".png")
		'API_Recolor(number, HeadSC, 10, HeadPC)
		
		If HeadPC <> 0 Then DeleteImage HeadPC
		
		//Sitten liitet‰‰n koko p‰‰ ruumiiseen
		HotSpot HeadSC
		DrawToImage Character
			DrawImage HeadSC, hx, hy
		DrawToScreen
		DeleteImage HeadSC
	EndIf

	//P‰‰hineest‰ todenn‰kˆisesti lˆytyy aina tunnusv‰rikuva, joten ladataan ensin ihonv‰rill‰
	If FileExists(dir + "Headgear_SC_" + Headgear + ".png") Then
		HeadgearSC = LoadImage(dir + "Headgear_SC_" + Headgear + ".png")
		'API_Recolor(number, HeadGearPC)
	EndIf
	If FileExists(dir + "Headgear_PC_" + Headgear + ".png") Then
		HeadgearPC = LoadImage(dir + "Headgear_PC_" + Headgear + ".png")
		API_Recolor(number, HeadGearPC, 10, HeadGearSC)
		
		If HeadGearSC <> 0 Then DeleteImage HeadGearSC
		
		//Sitten liitet‰‰n koko p‰‰hine ruumiiseen
		HotSpot HeadGearPC
		DrawToImage Character
			DrawImage HeadGearPC, hx, hy
		DrawToScreen
		DeleteImage HeadGearPC
	EndIf
	
	Return Character
EndFunction
