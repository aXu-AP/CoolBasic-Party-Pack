//Näytön piirtämiseen ja skaalaamiseen tarvittavia muuttujia
Global API_RenderW, API_RenderH, API_RenderZoom
Global API_ScreenW, API_ScreenH
Global MAIN_MidImage, MAIN_ScreenOffsetX, MAIN_ScreenOffsetY

// Vaihtaa renderöintiresoluutiota
Function API_Resolution(w, h)
	API_RenderW = w
	API_RenderH = h
	
	API_RenderZoom = Min(RoundDown(Float(API_ScreenW) / API_RenderW), RoundDown(Float(API_ScreenH) / API_RenderH))
	
	If API_ScreenW <> API_RenderW Or API_ScreenH <> API_RenderH Then
		If MAIN_MidImage Then DeleteImage MAIN_MidImage
		MAIN_MidImage = MakeImage(API_RenderW, API_RenderH * API_RenderZoom)
		MAIN_ScreenOffsetX = (API_ScreenW - API_RenderW * API_RenderZoom) / 2
		MAIN_ScreenOffsetY = (API_ScreenH - API_RenderH * API_RenderZoom) / 2
	EndIf
EndFunction


// Asettaa näytön resoluution
// Korvaa Screen komennon
Function API_Screen(Width = 0, Height = 0, Windowed = 0)
	// Natiiviresoluutio jos 0, 0
	If (Width = 0 And Height = 0) Then
	   SCREEN 0, 0, 0, 0
	   API_ScreenW = ScreenWidth()
	   API_ScreenH = ScreenHeight()
	Else
		API_ScreenW = Width
		API_ScreenH = Height
		
		If Not GFXModeExists(API_ScreenW, API_ScreenH, 32) Then Windowed = 1
	EndIf
	
	// Aseta samoiksi ettei jää nollaan
	If API_RenderW = 0 Or API_RenderH = 0 Then
		API_RenderW = API_ScreenW
		API_RenderW = API_ScreenW
		API_RenderZoom = 1
	EndIf
	
	SCREEN API_ScreenW, API_ScreenH, 0, Windowed
	
	//TODO: lataa aina tarvittavat kuvat ja äänet uudestaan
EndFunction 


//Piirtää ja skaalaa API_RenderW x API_RenderH kokoisen alueen ruudulta
Function API_DrawScreen()

	//TODO: Virheilmoitukset jotka ei kaada koko ohjelmaa
	
	//TODO: Pause
	
	//TODO: Käyttöliittymäkomponentit
	
	//TODO: Simuloi hiirtä kokoruudulla

	//Skaalataan vain jos ruudun koko ei vastaa haluttua
	If API_ScreenW <> API_RenderW Or API_ScreenH <> API_RenderH Then
		For y = 0 To API_RenderH - 1
			For i = 0 To API_RenderZoom
				CopyBox 0,  y, API_RenderW, 1, 0, y * API_RenderZoom + i, SCREEN(), Image(MAIN_MidImage)
			Next i
		Next y
		
		Cls 
		DrawToWorld OFF
		
		For x = 0 To API_RenderW - 1
			For i = 0 To API_RenderZoom
				DestinationX = Int(CameraX()) + x * API_RenderZoom + i - API_ScreenW / 2 + MAIN_ScreenOffsetX
				DestinationY = Int(-CameraY())                         - API_ScreenH / 2 + MAIN_ScreenOffsetY
				
				CopyBox x, 0, API_RenderZoom, API_RenderH * API_RenderZoom, DestinationX, DestinationY, Image(MAIN_MidImage), SCREEN()
			Next i
		Next x
	EndIf
	
	DrawScreen
EndFunction	


//Korvaa LoadImage
Function API_LoadImage(file$)
	//TODO: virheidenkäsittely kun tiedostoa ei löydy
	file$ = Str(MAIN_LocateMedia(file$))
	Return LoadImage(file$)
EndFunction


//Korvaa LoadObject
Function API_LoadObject(file$,rotation)
	//TODO: virheidenkäsittely kun tiedostoa ei löydy
	file$ = Str(MAIN_LocateMedia(file$))
	Return LoadObject(file$,rotation)
EndFunction


//Korvaa MakeObjectFloorin
Function API_MakeObjectFloor()
	Return MakeObjectFloor() 
EndFunction


//Etsii tiedostoa pelin kansiosta ja media kansiosta
//auttaa lyhentämään ladattavien kuvien yms. nimiä
//Palauttaa polun merkkijonona jos tiedosto löytyy
//Palauttaa tyhjän merkkijonon jos tiedostoa ei löydy
Function MAIN_LocateMedia(file$) 
	//TODO: Onko media kansion sijainti lopullinen?
	gamePath$ = "Games/"+MAIN_RunningGameID+"/" 
	mediaPath$ = "Media/"

	If (FileExists(gamePath$+file$)) Then Return gamePath$+file$ 
	If (FileExists(mediaPath$+file$)) Then Return mediaPath$+file$
	If FileExists(file$) Then Return file$
	
	Return ""
EndFunction 


//Hiiren x-koordinaatti renderöintikoordinaatistossa
Function API_MouseX()
	Return (MouseX()- MAIN_ScreenOffsetX) / API_RenderZoom 
EndFunction 

//Hiiren y-koordinaatti renderöintikoordinaatistossa
Function API_MouseY()
	Return (MouseY()- MAIN_ScreenOffsetY) / API_RenderZoom 
EndFunction 

//Palauttaa 1 jos hiiri on renderöintikoordinaatistossa
//alueen päällä, hyvä käyttää käyttöliittymäelementeissä
Function API_MouseInBox(x,y,w,h)
	mx = API_MouseX()
	my = API_MouseY()
	Return (mx >= x And mx < x+w And my >= y And my< y+h)
EndFunction 



//Värjää kuvan pelaajan tunnusvärillä
//Erityisesti harmaasävyisille kuville
//Palauttaa kuvan 
Function API_Recolor(playerID, img, overlayImg = 0)

	p.API_Player = ConvertToType(playerID)
	
	If ( p <> NULL) Then 
	
		//Pelaajan värin suhteellinen voimakkuus 0.0 - 1.0
		redAmount#   = Float(PeekByte(p\static,API_PLAYER_RED))   / 255.0
		greenAmount# = Float(PeekByte(p\static,API_PLAYER_GREEN)) / 255.0
		blueAmount#  = Float(PeekByte(p\static,API_PLAYER_BLUE))  / 255.0
		
		If ( img <> 0 ) Then 
	
			//lukittu kuva että saadaan nopeutta
			Lock Image(img)
				For x=0 To ImageWidth(img)-1
					For y=0 To ImageHeight(img)-1
					
						//pikselista RGB
						pixel = GetPixel2 (x,y,Image(img))
						
						pixel = pixel Shl 8
						r = pixel Shr 24
						
						pixel = pixel Shl 8
						g = pixel Shr 24
						
						pixel = pixel Shl 8
						b = pixel Shr 24 
						
						// kerrotaan kukin pikseliarvo suhteellisella voimakkuudella
						r = Float(r) * redAmount# 
						g = Float(g) * greenAmount# 
						b = Float(b) * blueAmount# 
						
						//RGB:stä pikseli
						pixel = b + (g Shl 8) + (r Shl 16) + (255 Shl 24)
						
						PutPixel2 x,y,pixel,Image(img)
						
					Next y
				Next x
			Unlock Image(img)
			
			//Lisätään päälle toinen kuva jos se on annettu
			If (overlayImg <> 0) Then
				DrawToImage img
					DrawImage overlayImg, 0, 0
				DrawToScreen
			EndIf
		EndIf 
		
	EndIf 
	
	Return img
EndFunction 

