//Näytön piirtämiseen ja skaalaamiseen tarvittavia muuttujia
Global API_RenderW, API_RenderH, MAIN_RenderZoom
Global MAIN_ScreenW, MAIN_ScreenH
Global MAIN_MidImage, MAIN_FinImage, MAIN_ScreenOffsetX, MAIN_ScreenOffsetY

// pausen ja ajastimien vaatima pelin sisäinen aika muuttuja
Global MAIN_GameStartTimer, API_Timer


// Vaihtaa renderöintiresoluutiota
Function MAIN_Resolution(w, h)
	API_RenderW = w
	API_RenderH = h
	
	MAIN_RenderZoom = Min(RoundDown(Float(MAIN_ScreenW) / API_RenderW), RoundDown(Float(MAIN_ScreenH) / API_RenderH))
	
	If MAIN_ScreenW <> API_RenderW Or MAIN_ScreenH <> API_RenderH Then
		If MAIN_MidImage Then DeleteImage MAIN_MidImage
		MAIN_MidImage = MakeImage(API_RenderW, API_RenderH * MAIN_RenderZoom)
		MAIN_FinImage = MakeImage(API_RenderW * MAIN_RenderZoom, API_RenderH * MAIN_RenderZoom)
		MAIN_ScreenOffsetX = (MAIN_ScreenW - API_RenderW * MAIN_RenderZoom) / 2
		MAIN_ScreenOffsetY = (MAIN_ScreenH - API_RenderH * MAIN_RenderZoom) / 2
	EndIf
EndFunction


// Asettaa näytön resoluution
// Korvaa Screen komennon
Function MAIN_Screen(Width = 0, Height = 0, Windowed = 0)
	// Natiiviresoluutio jos 0, 0
	If (Width = 0 And Height = 0) Then
	   SCREEN 0, 0, 0, 0
	   MAIN_ScreenW = ScreenWidth()
	   MAIN_ScreenH = ScreenHeight()
	Else
		MAIN_ScreenW = Width
		MAIN_ScreenH = Height
		
		If Not GFXModeExists(MAIN_ScreenW, MAIN_ScreenH, 32) Then Windowed = 1
	EndIf
	
	// Aseta samoiksi ettei jää nollaan
	If API_RenderW = 0 Or API_RenderH = 0 Then
		API_RenderW = MAIN_ScreenW
		API_RenderW = MAIN_ScreenW
		MAIN_RenderZoom = 1
	EndIf
	
	SCREEN MAIN_ScreenW, MAIN_ScreenH, 0, Windowed
	
EndFunction 


//Piirtää ja skaalaa API_RenderW x API_RenderH kokoisen alueen ruudulta
Function API_DrawScreen()

	API_Timer = Timer() - MAIN_GameStartTimer 

	DrawToWorld OFF, OFF, OFF
	
	//Käyttöliittymäkomponentit
	MAIN_DrawWidgets(1)
	
	//TODO: Simuloi hiirtä kokoruudulla

	//Skaalataan vain jos ruudun koko ei vastaa haluttua
	If MAIN_ScreenW <> API_RenderW Or MAIN_ScreenH <> API_RenderH Then
		For y = 0 To API_RenderH - 1
			CopyBox 0,  y, API_RenderW, 1, 0, y * MAIN_RenderZoom + i, SCREEN(), Image(MAIN_MidImage)
		Next y
		
		Cls 
		
		For x = 0 To API_RenderW - 1
			CopyBox x, 0, 1, API_RenderH * MAIN_RenderZoom, x * MAIN_RenderZoom + i, 0, Image(MAIN_MidImage), Image(MAIN_FinImage)
		Next x
		
		DestinationX = (MAIN_ScreenW - API_RenderW * MAIN_RenderZoom) / 2
		DestinationY = (MAIN_ScreenH - API_RenderH * MAIN_RenderZoom) / 2
		For y = DestinationY To DestinationY + MAIN_RenderZoom - 1
			For x = DestinationX To DestinationX + MAIN_RenderZoom - 1
				DrawImage MAIN_FinImage, x, y
			Next x
		Next y
	EndIf
	
	//Menu
	If KeyHit(1) Then MAIN_Menu()
	
	SetWindow "FPS: " + FPS()+" Running game: "+MAIN_RunningGameID
	
	DrawScreen
EndFunction	


//Keskeyttää pelin ja antaa:
// TODO: - muokata näppäimiä 
// TODO: - lisätä pelaajia
// TODO: - käynnistää pelin alusta
Function MAIN_Menu()

	pauseStartTime = Timer()

	pauseImage = MakeImage (API_RenderW, API_RenderH)
	
	CopyBox 0,  0, API_RenderW, API_RenderH, 0, 0, SCREEN(), Image(pauseImage) 
	
	ClearKeys
	ClearMouse 
	
	listData = API_WidgetListItemData("Lopeta minipeli,Aloita minipeli alusta,Lisää uusi pelaaja,Muokkaa pelaajan näppäimiä","")
	listTemplate = API_WidgetListTemplate(2,2, 0, 0 ,API_RenderW/2,20)
	list = API_WidgetList(listData, listTemplate, API_ORIENTATION_VERTICAL, API_POSITION_CENTER)

	If MAIN_RunningGameID = "" Then 
		API_ToggleWidget(API_GetListitem(list, 0),0)
		API_ToggleWidget(API_GetListitem(list, 1),0)
	EndIf 
	
	Repeat
	
		DrawGame
		
		Cls
			
		DrawImage pauseImage,0,0

		For i = 0 To 3 
		
			listItem = API_GetListitem(list, i)
			
			If MAIN_MouseOnWidget(listItem) And MouseHit(1) Then 
			
				//lopeta peli
				If i = 0  Then
					MAIN_Stop()
					MAIN_SelectGame()
				ElseIf i = 1  Then
					id$ = MAIN_RunningGameID 
					MAIN_Stop()
					MAIN_Start(id$ ,MAIN_GameData)
				EndIf 
				
			EndIf 
		
		Next i

		
		
		MAIN_DrawWidgets(1)
		
		DrawScreen 
		
	Until KeyHit(1)
	
	
	MAIN_DeleteWidget(list)
	
	ClearKeys
	ClearMouse 
	
	DeleteImage pauseImage
	 
	MAIN_GameStartTimer = MAIN_GameStartTimer  + (Timer() - pauseStartTime)

End Function 


Function API_MakeError(message$,critical=0)

	DrawToWorld OFF,OFF,OFF 

	error = API_LoadImage("error.png")
	MaskImage error, 255, 255, 0
	
	DrawImage error,0,0
	
	r = getRGB (RED)
	g = getRGB (RED)
	b = getRGB (RED)

	Color 0,0,0
	
    If MAIN_RunningGameID <> "" Then
		iG.MAIN_Game = converttotype(MAIN_GetGame(MAIN_RunningGameID))
		Text 170, 20, "Virhe pelissä "+iG\Name+" :"
		Text 170, 40, Chr(34)+message$+Chr(34)
		
		If critical Then Text 170, 100, "Palaa päävalikkoon painalla mitä tahansa näppäintä"
	Else 
		Text 170, 20,message$
		
		If critical Then Text 170, 100, "Palaa päävalikkoon painalla mitä tahansa näppäintä"
	EndIf 
		
	DrawScreen
	
	WaitKey
	
	Color r, g, b

	If critical Then 
		MAIN_Stop()
		MAIN_SelectGame()
	EndIf 
	
End Function 


//Hiiren x-koordinaatti renderöintikoordinaatistossa
Function MAIN_MouseX()
	Return (MouseX()- MAIN_ScreenOffsetX) / MAIN_RenderZoom 
EndFunction 

//Hiiren y-koordinaatti renderöintikoordinaatistossa
Function MAIN_MouseY()
	Return (MouseY()- MAIN_ScreenOffsetY) / MAIN_RenderZoom 
EndFunction 

//Palauttaa 1 jos hiiri on renderöintikoordinaatistossa
//alueen päällä, hyvä käyttää käyttöliittymäelementeissä
Function MAIN_MouseInBox(x,y,w,h)
	mx = MAIN_MouseX()
	my = MAIN_MouseY()
	Return (mx >= x And mx < x+w And my >= y And my< y+h)
EndFunction 


//Värjää kuvan pelaajan tunnusvärillä
//Erityisesti harmaasävyisille kuville
//Palauttaa kuvan 
Function API_Recolor(number, img, threshold = 10, overlayImg = 0)

	If (number >= 0 And number < MAIN_MAX_PLAYERS) Then
	
		player = MAIN_PlayerData(number)
	
		//Pelaajan värin suhteellinen voimakkuus 0.0 - 1.0
		redAmount#   = Float(PeekByte(player, MAIN_PLAYER_COLOR + 3 - RED))   / 128.0
		greenAmount# = Float(PeekByte(player, MAIN_PLAYER_COLOR + 3 - GREEN)) / 128.0
		blueAmount#  = Float(PeekByte(player, MAIN_PLAYER_COLOR + 3 - BLUE))  / 128.0
		
		If ( img <> 0 ) Then 
		
			//lukittu kuva että saadaan nopeutta
			Lock Image(img)
				For x=0 To ImageWidth(img)-1
					For y=0 To ImageHeight(img)-1
					
						//pikselista RGB
						pixel = GetPixel2 (x,y,Image(img))
						
						pixel = pixel * 256
						r = pixel Shr 24
						
						pixel = pixel * 256
						g = pixel Shr 24
						
						pixel = pixel * 256
						b = pixel Shr 24 
						
						//Tarkistetaan onko muutettava pikseli harmaasävyinen (thresholdin rajoissa)
						k = (r + g + b) / 3
						If Abs(k - r) + Abs(k - g) + Abs(k - b) =< threshold Then
							// kerrotaan kukin pikseliarvo suhteellisella voimakkuudella
							r = Min(255, Float(r) * redAmount#)
							g = Min(255, Float(g) * greenAmount#)
							b = Min(255, Float(b) * blueAmount#)
							
							//RGB:stä pikseli
							pixel = b + (g * 256) + (r * 65536) - 16777216
							
							PutPixel2 x,y,pixel,Image(img)
						EndIf
					Next y
				Next x
			Unlock Image(img)
			
			//Lisätään päälle toinen kuva jos se on annettu
			If (overlayImg <> 0) Then
				DrawToImage img
					DrawImage overlayImg, 0, 0
				DrawToScreen
			EndIf
		EndIf 
		
	EndIf 
	
	Return img
EndFunction 


//Asettaa kaikki cb:n arvot oletuksiin
Function API_ResetToDefaults()
	PositionCamera 0, 0
	DrawToWorld OFF, OFF, OFF
	DrawToScreen
	SAFEEXIT OFF 
	
	DefaultVisible ON
	
	DefaultMask ON, 0, 0, 0
	HotSpot OFF
	
	ClearKeys
	ClearMouse
	CloseInput
	
	Color 255, 255, 255
	ClsColor 0, 0, 0
	
	Smooth2D OFF
EndFunction

Global MAIN_MemChangedAddress 

//Asettaa tai palauttaa kokonaisluvun
Function MAIN_MemInt(dynamic, offset, value$ = "NAN")
	offset = offset * 4
	
	//Venytetään palikkaa jos tarpeen
	If offset + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, offset + 4

	MAIN_MemChangedAddress = dynamic
		
	If value$ = "NAN" Then
		Return PeekInt(dynamic, offset)
	Else
		iValue = Int(value)
		PokeInt dynamic, offset,iValue 
		Return iValue
	EndIf
	
EndFunction

//Asettaa tai palauttaa desimaaliluvun
Function MAIN_MemFloat(dynamic, offset, value$ = "NAN")
	offset = offset * 4

	//Venytetään palikkaa jos tarpeen
	If offset + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, offset + 4

	MAIN_MemChangedAddress = dynamic
		
	If value$ = "NAN" Then
		Return PeekFloat(dynamic, offset)
	Else
		fValue# = Float(value$)
		PokeFloat dynamic, offset,fValue# 
		Return fValue#
	EndIf
	
EndFunction

//Asettaa tai palauttaa merkkijonon
Function MAIN_MemString(dynamic, offset, value$ = "TOIVOTAANettäEItuleTÖRMÄYKSIÄtämänMERKKIJONONkanssa!!")
	offset = offset * 4
	
	//Venytetään palikkaa jos tarpeen
	If offset + 4 > MEMBlockSize(dynamic) Then ResizeMEMBlock dynamic, offset + 4
		
	MAIN_MemChangedAddress = dynamic

	//Tehdään uusi merkkijono, jos ei ole olemassa
	address = PeekInt(dynamic, offset)
	If address = 0 Then
		iS.MAIN_CommonString = New(MAIN_CommonString)
		id = ConvertToInteger(iS)
		PokeInt dynamic, offset, id
	Else
		iS = ConvertToType(address)
	EndIf
	
	If value = "TOIVOTAANettäEItuleTÖRMÄYKSIÄtämänMERKKIJONONkanssa!!" Then
		Return iS\txt
	Else
		iS\txt = value$
	EndIf
	
EndFunction

